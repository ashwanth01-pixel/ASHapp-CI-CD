name: Build -> Push -> Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKERFILE_PATH: ./Dockerfile
  K8S_MANIFEST_DIR: ./k8s
  DEPLOYMENT_NAME: ashapp
  DEPLOYMENT_CONTAINER_NAME: ashapp
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 267092042432
  ECR_REPOSITORY_URL: 267092042432.dkr.ecr.us-east-1.amazonaws.com/ashapp
  EKS_CLUSTER_NAME: ashapp-eks
  K8S_SERVICE_NAME: ashapp-service

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v1

      - id: build
        run: |
          TAG="sha-${GITHUB_SHA::8}"
          docker build -t ${ECR_REPOSITORY_URL}:${TAG} -f ${{ env.DOCKERFILE_PATH }} .
          docker tag ${ECR_REPOSITORY_URL}:${TAG} ${ECR_REPOSITORY_URL}:latest
          docker push ${ECR_REPOSITORY_URL}:${TAG}
          docker push ${ECR_REPOSITORY_URL}:latest
          echo "image_uri=${ECR_REPOSITORY_URL}:${TAG}" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: azure/setup-kubectl@v4
        with:
          version: '1.27.0'

      - run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      - run: |
          for i in {1..30}; do
            if kubectl get nodes 2>/dev/null | grep -q " Ready "; then
              break
            fi
            sleep 10
          done

      - run: |
          IMAGE_URI="${{ needs.build_and_push.outputs.image_uri }}"
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
            ${{ env.DEPLOYMENT_CONTAINER_NAME }}=${IMAGE_URI} --record || true
          kubectl apply -f ${{ env.K8S_MANIFEST_DIR }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=180s

      - id: get_external_ip
        run: |
          echo "Waiting for external IP of service '${{ env.K8S_SERVICE_NAME }}'..."
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get svc ${{ env.K8S_SERVICE_NAME }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            if [ -z "$EXTERNAL_IP" ]; then
              EXTERNAL_IP=$(kubectl get svc ${{ env.K8S_SERVICE_NAME }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            fi
            if [ -n "$EXTERNAL_IP" ]; then
              echo "External IP found: $EXTERNAL_IP"
              echo "external_ip=$EXTERNAL_IP" >> $GITHUB_OUTPUT
              echo "::notice::External IP is $EXTERNAL_IP"
              break
            fi
            sleep 10
          done
