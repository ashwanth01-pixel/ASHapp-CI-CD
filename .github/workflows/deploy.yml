name: Terraform -> Build -> Push -> Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  TF_WORKING_DIR: terraform
  DOCKERFILE_PATH: ./Dockerfile
  K8S_MANIFEST_DIR: ./k8s
  DEPLOYMENT_NAME: ashapp
  DEPLOYMENT_CONTAINER_NAME: ashapp
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: 267092042432

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      ecr_repository_url: ${{ steps.get-outputs.outputs.ecr_repository_url }}
      eks_cluster_name: ${{ steps.get-outputs.outputs.eks_cluster_name }}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - run: terraform init -input=false
        working-directory: ${{ env.TF_WORKING_DIR }}

      - run: terraform apply -auto-approve
        working-directory: ${{ env.TF_WORKING_DIR }}

      - id: get-outputs
        run: |
          echo "ecr_repository_url=$(terraform output -raw ecr_repository_url | tr -d '\r')" >> $GITHUB_OUTPUT
          echo "eks_cluster_name=$(terraform output -raw eks_cluster_name | tr -d '\r')" >> $GITHUB_OUTPUT
        working-directory: ${{ env.TF_WORKING_DIR }}

  build_and_push:
    runs-on: ubuntu-latest
    needs: terraform
    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: aws-actions/amazon-ecr-login@v1

      - id: build
        run: |
          ECR_URL="${{ needs.terraform.outputs.ecr_repository_url }}"
          TAG="sha-${GITHUB_SHA::8}"
          docker build -t ${ECR_URL}:${TAG} -f ${{ env.DOCKERFILE_PATH }} .
          docker tag ${ECR_URL}:${TAG} ${ECR_URL}:latest
          docker push ${ECR_URL}:${TAG}
          docker push ${ECR_URL}:latest
          echo "image_uri=${ECR_URL}:${TAG}" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: [terraform, build_and_push]
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: azure/setup-kubectl@v4
        with:
          version: '1.27.0'

      - run: |
          for i in {1..30}; do
            STATUS=$(aws eks describe-cluster \
              --name "${{ needs.terraform.outputs.eks_cluster_name }}" \
              --region "${{ env.AWS_REGION }}" \
              --query "cluster.status" --output text || echo "NOT_FOUND")
            if [ "$STATUS" == "ACTIVE" ]; then
              break
            fi
            sleep 20
          done

      - run: |
          aws eks update-kubeconfig \
            --name "${{ needs.terraform.outputs.eks_cluster_name }}" \
            --region "${{ env.AWS_REGION }}"

      - run: |
          for i in {1..30}; do
            if kubectl get nodes 2>/dev/null | grep -q " Ready "; then
              break
            fi
            sleep 10
          done

      - run: |
          IMAGE_URI="${{ needs.build_and_push.outputs.image_uri }}"
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} \
            ${{ env.DEPLOYMENT_CONTAINER_NAME }}=${IMAGE_URI} --record || true
          kubectl apply -f ${{ env.K8S_MANIFEST_DIR }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=180s
