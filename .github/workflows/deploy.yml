name: Terraform -> Build -> Push -> Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  TF_WORKING_DIR: terraform
  DOCKERFILE_PATH: ./Dockerfile
  K8S_MANIFEST_DIR: ./k8s
  DEPLOYMENT_NAME: ashapp
  DEPLOYMENT_CONTAINER_NAME: ashapp

jobs:
  terraform_eks:
    runs-on: ubuntu-latest
    outputs:
      ecr_repository_url: ${{ steps.tf-outputs.outputs.ecr_repository_url }}
      eks_cluster_name: ${{ steps.tf-outputs.outputs.eks_cluster_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -input=false

      - name: Terraform Apply (EKS Only)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform apply -auto-approve \
            -target=aws_eks_cluster.ashapp \
            -target=aws_eks_node_group.ashapp_nodes \
            -target=aws_iam_role.eks_cluster_role \
            -target=aws_iam_role.node_group_role \
            -target=aws_iam_role_policy_attachment.eks_cluster_AmazonEKSClusterPolicy \
            -target=aws_iam_role_policy_attachment.eks_cluster_AmazonEKSVPCResourceController \
            -target=aws_iam_role_policy_attachment.node_group_AmazonEKSWorkerNodePolicy \
            -target=aws_iam_role_policy_attachment.node_group_AmazonEKS_CNI_Policy \
            -target=aws_iam_role_policy_attachment.node_group_AmazonEC2ContainerRegistryReadOnly \
            -target=aws_ecr_repository.ashapp

      - name: Wait for EKS Nodes
        run: |
          count=0
          until kubectl get nodes; do
            if [ $count -ge 30 ]; then
              echo "Timeout waiting for EKS nodes"
              exit 1
            fi
            echo "Waiting for EKS nodes to be ready..."
            sleep 10
            count=$((count + 1))
          done

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ashapp \
            --region "${{ secrets.AWS_REGION }}"

      - name: Terraform Apply (Remaining Resources)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: tf-outputs
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
          echo "eks_cluster_name=$(terraform output -raw eks_cluster_name)" >> $GITHUB_OUTPUT

  build_and_push:
    runs-on: ubuntu-latest
    needs: terraform_eks
    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Tag Docker Image
        id: build
        run: |
          ECR_URL="${{ needs.terraform_eks.outputs.ecr_repository_url }}"
          TAG="sha-${GITHUB_SHA::8}"
          docker build -t ${ECR_URL}:${TAG} -f ${{ env.DOCKERFILE_PATH }} .
          docker tag ${ECR_URL}:${TAG} ${ECR_URL}:latest
          docker push ${ECR_URL}:${TAG}
          docker push ${ECR_URL}:latest
          echo "image_uri=${ECR_URL}:${TAG}" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: '1.27.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name "${{ needs.terraform_eks.outputs.eks_cluster_name }}" \
            --region "${{ secrets.AWS_REGION }}"

      - name: Create AWS credentials secret in EKS
        run: |
          kubectl create secret generic aws-credentials \
            --from-literal=aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy to EKS
        run: |
          IMAGE_URI="${{ needs.build_and_push.outputs.image_uri }}"
          kubectl -n default set image deployment/${{ env.DEPLOYMENT_NAME }} \
            ${{ env.DEPLOYMENT_CONTAINER_NAME }}=${IMAGE_URI} --record || true
          kubectl apply -f ${{ env.K8S_MANIFEST_DIR }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} --timeout=180s
